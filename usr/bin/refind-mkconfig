#!/bin/bash

source /etc/default/refind || exit 1

if [[ $CHECK_UCODE = "true" ]]; then
    _ucode=$(ls /boot | grep ucode)
    if [[ $_ucode = "amd-ucode.img" ]]; then
        ucode='initrd=\\amd-ucode.img'
    elif [[ $_ucode = "intel-ucode.img" ]]; then
        ucode='initrd=\\intel-ucode.img'
    fi
fi

generate_menuentry() {
    os_icon=$(echo "$1" | tr [:upper:] [:lower:])
    if [[ ! $(ls /boot | grep $DEFAULT_KERNEL) ]]; then
        echo "$DEFAULT_KERNEL not found in /boot. Automatically setting default kernel..."
        DEFAULT_KERNEL=$(ls /boot | grep "vmlinuz-linux\|vmlinuz-linux-zen\|vmlinuz-linux-hardened\|vmlinuz-linux-lts" | cut -d "-" -f 2- | awk '{print $1}')
    fi
    main_entry="\n${main_entry}menuentry \"$1\" {\n"
    [[ ! -z $THEME ]] && main_entry="$main_entry\ticon /EFI/refind/themes/$THEME/icons/os_$os_icon.png \n"
    main_entry="$main_entry\tvolume $2\n"
    main_entry="$main_entry\tostype Linux\n"
    main_entry="$main_entry\tloader /vmlinuz-$DEFAULT_KERNEL\n"
    main_entry="$main_entry\tinitrd /initramfs-$DEFAULT_KERNEL.img\n"
    main_entry="$main_entry\toptions \"root=$root $REFIND_CMDLINE_LINUX $REFIND_CMDLINE_LINUX_DEFAULT\" $ucode\n"
    main_entry="$main_entry\tsubmenuentry \"Boot using safe graphics\" {\n"
    main_entry="$main_entry\t  initrd /initramfs-$DEFAULT_KERNEL-safegraphics.img\n"
    main_entry="$main_entry\t  options \"root=$root rw add_efi_memmap $REFIND_CMDLINE_LINUX_DEFAULT\"\n\t}\n"
}

generate_submenuentry() {
    sub_entry="$sub_entry\tsubmenuentry \"$1\" {\n"
    sub_entry="$sub_entry\t  loader /vmlinuz-$1\n"
    sub_entry="$sub_entry\t  initrd /initramfs-$1.img\n"
    sub_entry="$sub_entry\t  options \"root=$root rw add_efi_memmap $REFIND_CMDLINE_LINUX $REFIND_CMDLINE_LINUX_DEFAULT\" $ucode\n\t}"
    printf "%s" "$sub_entry\n"
}

generate_osprober() {
    os_icon=$(echo "$1" | tr '[:upper:] [:lower:]')
    main_entry="\n${main_entry}menuentry \"$1\" {\n"
    [[ ! -z $THEME ]] && main_entry="$main_entry\ticon /EFI/refind/themes/$THEME/icons/os_$os_icon.png \n"
    case "$1" in
        "Windows")
            loader=$(echo "$2" | cut -d "/" -f 4-)
            main_entry="$main_entry\tloader /$loader\n}"
        ;;
        *)
            opts=$(sudo linux-boot-prober "$2")
            main_opt=$(echo "$opts" | head -1)
            opts=$(echo "$opts" | awk 'IF NR>1 {print}')
            setopt shwordsplit
            OLD_IFS=$IFS; IFS=$'\n'


            unsetopt shwordsplit
        ;;
    esac
}

dev=$(mount | grep "/boot " | awk '{print $1}')
root=$(mount | grep -w '/' | awk '{print $1}' | rev | cut -d '/' -f 1 | rev)
is_lvm=$(sudo lvs -o lv_name | awk '{if(NR>1)print}' | tr -d " " | while read lv; do findmnt -l | grep '/dev/\S\+' | awk '{print $2}' | grep $lv; done)

if [[ -z $dev ]]; then
    [[ $(echo "$is_lvm" | grep "$root") ]] && \
        guid=$(sudo dmsetup deps -o devname | grep $root | awk '{print $NF}' | tr -d "()" | sudo xargs dmsetup deps -o devname | awk '{print "/dev/"$NF}' | tr -d "()" | sudo xargs lsblk -o partuuid | awk 'IF NR>1 {print}') ||
        guid=$(sudo dmsetup deps -o devname | grep "$root" | awk '{print "/dev/"$NF}' | tr -d "()" | sudo xargs lsblk -o partuuid | awk 'IF NR>1 {print}')
else
    guid=$(sudo lsblk -o partuuid $dev | awk 'IF NR>1 {print}')
fi
[[ ! -z $is_lvm ]] && root="/dev/mapper/$root" || root="/dev/$root"

generate_menuentry "$OS_DISTRIBUTOR" "$guid"
sub=$(ls /boot | grep "vmlinuz-linux\|vmlinuz-linux-zen\|vmlinuz-linux-hardened\|vmlinuz-linux-lts" | cut -d "-" -f 2- | while read k; do
    [[ $k != $DEFAULT_KERNEL ]] && generate_submenuentry $k
done)
main_entry="$main_entry$sub}\n"

# if [[ $OS_PROBER = "true" ]]; then
#     setopt shwordsplit
#     other_os=$(sudo os-prober | cut -d ":" -f 1,3 | tr "\n" " ")
#     for os in $other_os; do
#         os_name=$(echo $os | cut -d ":" -f 2)
#         os_root=$(echo $os | cut -d ":" -f 1)
#         echo $os_name
#         echo $os_root
#     done
#     unsetopt shwordsplit
# fi
echo -e "$main_entry"
# echo -e "$main_entry" | sudo tee /boot/efi/EFI/refind/refind_entries.conf
